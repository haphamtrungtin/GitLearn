// <auto-generated>
// ReSharper disable All

using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Design;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.Query;
using Microsoft.EntityFrameworkCore.Query.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Data.SqlTypes;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;

namespace GitLearn.Data
{
    #region Database context interface

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public interface IGitContext : IDisposable
    {
        DbSet<Branch> Branches { get; set; } // Branch
        DbSet<Commit> Commits { get; set; } // Commit
        DbSet<GitFile> GitFiles { get; set; } // GitFile
        DbSet<InviteRequest> InviteRequests { get; set; } // InviteRequest
        DbSet<Organization> Organizations { get; set; } // Organization
        DbSet<OrgUser> OrgUsers { get; set; } // OrgUser
        DbSet<PullRequest> PullRequests { get; set; } // PullRequest
        DbSet<Repo> Repoes { get; set; } // Repo
        DbSet<RepoTeam> RepoTeams { get; set; } // RepoTeam
        DbSet<RepoUser> RepoUsers { get; set; } // RepoUser
        DbSet<Team> Teams { get; set; } // Team
        DbSet<TeamMember> TeamMembers { get; set; } // TeamMember
        DbSet<TeamUser> TeamUsers { get; set; } // TeamUser
        DbSet<User> Users { get; set; } // User

        int SaveChanges();
        int SaveChanges(bool acceptAllChangesOnSuccess);
        Task<int> SaveChangesAsync(CancellationToken cancellationToken = default(CancellationToken));
        Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default(CancellationToken));
        DatabaseFacade Database { get; }
        DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();

        EntityEntry Add(object entity);
        EntityEntry<TEntity> Add<TEntity>(TEntity entity) where TEntity : class;
        Task AddRangeAsync(params object[] entities);
        Task AddRangeAsync(IEnumerable<object> entities, CancellationToken cancellationToken = default);
        ValueTask<EntityEntry<TEntity>> AddAsync<TEntity>(TEntity entity, CancellationToken cancellationToken = default) where TEntity : class;
        ValueTask<EntityEntry> AddAsync(object entity, CancellationToken cancellationToken = default);
        void AddRange(IEnumerable<object> entities);
        void AddRange(params object[] entities);

        EntityEntry Attach(object entity);
        EntityEntry<TEntity> Attach<TEntity>(TEntity entity) where TEntity : class;
        void AttachRange(IEnumerable<object> entities);
        void AttachRange(params object[] entities);

        EntityEntry Entry(object entity);
        EntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;

        TEntity Find<TEntity>(params object[] keyValues) where TEntity : class;
        ValueTask<TEntity> FindAsync<TEntity>(object[] keyValues, CancellationToken cancellationToken) where TEntity : class;
        ValueTask<TEntity> FindAsync<TEntity>(params object[] keyValues) where TEntity : class;
        ValueTask<object> FindAsync(Type entityType, object[] keyValues, CancellationToken cancellationToken);
        ValueTask<object> FindAsync(Type entityType, params object[] keyValues);
        object Find(Type entityType, params object[] keyValues);

        EntityEntry Remove(object entity);
        EntityEntry<TEntity> Remove<TEntity>(TEntity entity) where TEntity : class;
        void RemoveRange(IEnumerable<object> entities);
        void RemoveRange(params object[] entities);

        EntityEntry Update(object entity);
        EntityEntry<TEntity> Update<TEntity>(TEntity entity) where TEntity : class;
        void UpdateRange(IEnumerable<object> entities);
        void UpdateRange(params object[] entities);

        IQueryable<TResult> FromExpression<TResult> (Expression<Func<IQueryable<TResult>>> expression);
    }

    #endregion

    #region Database context

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class GitContext : DbContext, IGitContext
    {
        public GitContext()
        {
        }

        public GitContext(DbContextOptions<GitContext> options)
            : base(options)
        {
        }

        public DbSet<Branch> Branches { get; set; } // Branch
        public DbSet<Commit> Commits { get; set; } // Commit
        public DbSet<GitFile> GitFiles { get; set; } // GitFile
        public DbSet<InviteRequest> InviteRequests { get; set; } // InviteRequest
        public DbSet<Organization> Organizations { get; set; } // Organization
        public DbSet<OrgUser> OrgUsers { get; set; } // OrgUser
        public DbSet<PullRequest> PullRequests { get; set; } // PullRequest
        public DbSet<Repo> Repoes { get; set; } // Repo
        public DbSet<RepoTeam> RepoTeams { get; set; } // RepoTeam
        public DbSet<RepoUser> RepoUsers { get; set; } // RepoUser
        public DbSet<Team> Teams { get; set; } // Team
        public DbSet<TeamMember> TeamMembers { get; set; } // TeamMember
        public DbSet<TeamUser> TeamUsers { get; set; } // TeamUser
        public DbSet<User> Users { get; set; } // User

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer(@"Data Source=(local);Initial Catalog=GitDb;Integrated Security=True;MultipleActiveResultSets=True;Encrypt=false;TrustServerCertificate=true");
                //optionsBuilder.UseLazyLoadingProxies();
            }
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.ApplyConfiguration(new BranchConfiguration());
            modelBuilder.ApplyConfiguration(new CommitConfiguration());
            modelBuilder.ApplyConfiguration(new GitFileConfiguration());
            modelBuilder.ApplyConfiguration(new InviteRequestConfiguration());
            modelBuilder.ApplyConfiguration(new OrganizationConfiguration());
            modelBuilder.ApplyConfiguration(new OrgUserConfiguration());
            modelBuilder.ApplyConfiguration(new PullRequestConfiguration());
            modelBuilder.ApplyConfiguration(new RepoConfiguration());
            modelBuilder.ApplyConfiguration(new RepoTeamConfiguration());
            modelBuilder.ApplyConfiguration(new RepoUserConfiguration());
            modelBuilder.ApplyConfiguration(new TeamConfiguration());
            modelBuilder.ApplyConfiguration(new TeamMemberConfiguration());
            modelBuilder.ApplyConfiguration(new TeamUserConfiguration());
            modelBuilder.ApplyConfiguration(new UserConfiguration());
        }

    }

    #endregion

    #region Database context factory

    public class GitContextFactory : IDesignTimeDbContextFactory<GitContext>
    {
        public GitContext CreateDbContext(string[] args)
        {
            return new GitContext();
        }
    }

    #endregion

    #region Fake Database context

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class FakeGitContext : IGitContext
    {
        public DbSet<Branch> Branches { get; set; } // Branch
        public DbSet<Commit> Commits { get; set; } // Commit
        public DbSet<GitFile> GitFiles { get; set; } // GitFile
        public DbSet<InviteRequest> InviteRequests { get; set; } // InviteRequest
        public DbSet<Organization> Organizations { get; set; } // Organization
        public DbSet<OrgUser> OrgUsers { get; set; } // OrgUser
        public DbSet<PullRequest> PullRequests { get; set; } // PullRequest
        public DbSet<Repo> Repoes { get; set; } // Repo
        public DbSet<RepoTeam> RepoTeams { get; set; } // RepoTeam
        public DbSet<RepoUser> RepoUsers { get; set; } // RepoUser
        public DbSet<Team> Teams { get; set; } // Team
        public DbSet<TeamMember> TeamMembers { get; set; } // TeamMember
        public DbSet<TeamUser> TeamUsers { get; set; } // TeamUser
        public DbSet<User> Users { get; set; } // User

        public FakeGitContext()
        {
            _database = new FakeDatabaseFacade(new GitContext());

            Branches = new FakeDbSet<Branch>("Id");
            Commits = new FakeDbSet<Commit>("Id");
            GitFiles = new FakeDbSet<GitFile>("Id");
            InviteRequests = new FakeDbSet<InviteRequest>("Id");
            Organizations = new FakeDbSet<Organization>("Id");
            OrgUsers = new FakeDbSet<OrgUser>("Id");
            PullRequests = new FakeDbSet<PullRequest>("Id");
            Repoes = new FakeDbSet<Repo>("Id");
            RepoTeams = new FakeDbSet<RepoTeam>("Id");
            RepoUsers = new FakeDbSet<RepoUser>("Id");
            Teams = new FakeDbSet<Team>("Id");
            TeamMembers = new FakeDbSet<TeamMember>("Id");
            TeamUsers = new FakeDbSet<TeamUser>("Id");
            Users = new FakeDbSet<User>("Id");

        }

        public int SaveChangesCount { get; private set; }
        public virtual int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public virtual int SaveChanges(bool acceptAllChangesOnSuccess)
        {
            return SaveChanges();
        }

        public virtual Task<int> SaveChangesAsync(CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }
        public virtual Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(x => 1, acceptAllChangesOnSuccess, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private DatabaseFacade _database;
        public DatabaseFacade Database { get { return _database; } }

        public DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new NotImplementedException();
        }

        public override string ToString()
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Add(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Add<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual Task AddRangeAsync(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual async Task AddRangeAsync(IEnumerable<object> entities, CancellationToken cancellationToken = default)
        {
            await Task.CompletedTask;
            throw new NotImplementedException();
        }

        public virtual async ValueTask<EntityEntry<TEntity>> AddAsync<TEntity>(TEntity entity, CancellationToken cancellationToken = default) where TEntity : class
        {
            await Task.CompletedTask;
            throw new NotImplementedException();
        }

        public virtual async ValueTask<EntityEntry> AddAsync(object entity, CancellationToken cancellationToken = default)
        {
            await Task.CompletedTask;
            throw new NotImplementedException();
        }

        public virtual void AddRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void AddRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Attach(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Attach<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual void AttachRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void AttachRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Entry(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual TEntity Find<TEntity>(params object[] keyValues) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<TEntity> FindAsync<TEntity>(object[] keyValues, CancellationToken cancellationToken) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<TEntity> FindAsync<TEntity>(params object[] keyValues) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<object> FindAsync(Type entityType, object[] keyValues, CancellationToken cancellationToken)
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<object> FindAsync(Type entityType, params object[] keyValues)
        {
            throw new NotImplementedException();
        }

        public virtual object Find(Type entityType, params object[] keyValues)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Remove(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Remove<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual void RemoveRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void RemoveRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Update(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Update<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual void UpdateRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void UpdateRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual IQueryable<TResult> FromExpression<TResult> (Expression<Func<IQueryable<TResult>>> expression)
        {
            throw new NotImplementedException();
        }

    }

    #endregion

    #region Fake DbSet

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    public class FakeDbSet<TEntity> :
        DbSet<TEntity>,
        IQueryable<TEntity>,
        IAsyncEnumerable<TEntity>,
        IListSource,
        IResettableService
        where TEntity : class
    {
        private readonly PropertyInfo[] _primaryKeys;
        private ObservableCollection<TEntity> _data;
        private IQueryable _query;
        public override IEntityType EntityType { get; }

        public FakeDbSet()
        {
            _primaryKeys = null;
            _data        = new ObservableCollection<TEntity>();
            _query       = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data        = new ObservableCollection<TEntity>();
            _query       = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override ValueTask<TEntity> FindAsync(object[] keyValues, CancellationToken cancellationToken)
        {
            return new ValueTask<TEntity>(Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken));
        }

        public override ValueTask<TEntity> FindAsync(params object[] keyValues)
        {
            return new ValueTask<TEntity>(Task<TEntity>.Factory.StartNew(() => Find(keyValues)));
        }

        public override EntityEntry<TEntity> Add(TEntity entity)
        {
            _data.Add(entity);
            return null;
        }

        public override ValueTask<EntityEntry<TEntity>> AddAsync(TEntity entity, CancellationToken cancellationToken = default)
        {
            return new ValueTask<EntityEntry<TEntity>>(Task<EntityEntry<TEntity>>.Factory.StartNew(() => Add(entity), cancellationToken));
        }

        public override void AddRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            foreach (var entity in entities)
                _data.Add(entity);
        }

        public override void AddRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            foreach (var entity in entities)
                _data.Add(entity);
        }

        public override Task AddRangeAsync(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            return Task.Factory.StartNew(() => AddRange(entities));
        }

        public override Task AddRangeAsync(IEnumerable<TEntity> entities, CancellationToken cancellationToken = default)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            return Task.Factory.StartNew(() => AddRange(entities), cancellationToken);
        }

        public override EntityEntry<TEntity> Attach(TEntity entity)
        {
            if (entity == null) throw new ArgumentNullException("entity");
            return Add(entity);
        }

        public override void AttachRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            AddRange(entities);
        }

        public override void AttachRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            AddRange(entities);
        }

        public override EntityEntry<TEntity> Remove(TEntity entity)
        {
            _data.Remove(entity);
            return null;
        }

        public override void RemoveRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            foreach (var entity in entities.ToList())
                _data.Remove(entity);
        }

        public override void RemoveRange(IEnumerable<TEntity> entities)
        {
            RemoveRange(entities.ToArray());
        }

        public override EntityEntry<TEntity> Update(TEntity entity)
        {
            _data.Remove(entity);
            _data.Add(entity);
            return null;
        }

        public override void UpdateRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            RemoveRange(entities);
            AddRange(entities);
        }

        public override void UpdateRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            var array = entities.ToArray();        RemoveRange(array);
            AddRange(array);
        }

        bool IListSource.ContainsListCollection => true;

        public IList GetList()
        {
            return _data;
        }

        IList IListSource.GetList()
        {
            return _data;
        }

        Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_data); }
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        IEnumerator<TEntity> IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        public override IAsyncEnumerator<TEntity> GetAsyncEnumerator(CancellationToken cancellationToken = default)
        {
            return new FakeDbAsyncEnumerator<TEntity>(this.AsEnumerable().GetEnumerator());
        }

        public void ResetState()
        {
            _data  = new ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public Task ResetStateAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.Factory.StartNew(() => ResetState());
        }
    }

    public class FakeDbAsyncQueryProvider<TEntity> : FakeQueryProvider<TEntity>, IAsyncEnumerable<TEntity>, IAsyncQueryProvider
    {
        public FakeDbAsyncQueryProvider(Expression expression) : base(expression)
        {
        }

        public FakeDbAsyncQueryProvider(IEnumerable<TEntity> enumerable) : base(enumerable)
        {
        }

        public TResult ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken)
        {
            var expectedResultType = typeof(TResult).GetGenericArguments()[0];
            var executionResult = typeof(IQueryProvider)
                .GetMethods()
                .First(method => method.Name == nameof(IQueryProvider.Execute) && method.IsGenericMethod)
                .MakeGenericMethod(expectedResultType)
                .Invoke(this, new object[] { expression });

            return (TResult) typeof(Task).GetMethod(nameof(Task.FromResult))
                ?.MakeGenericMethod(expectedResultType)
                .Invoke(null, new[] { executionResult });
        }

        public IAsyncEnumerator<TEntity> GetAsyncEnumerator(CancellationToken cancellationToken = default)
        {
            return new FakeDbAsyncEnumerator<TEntity>(this.AsEnumerable().GetEnumerator());
        }
    }

    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, IAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(IEnumerable<T> enumerable)
            : base(enumerable)
        {
        }

        public FakeDbAsyncEnumerable(Expression expression)
            : base(expression)
        {
        }

        public IAsyncEnumerator<T> GetAsyncEnumerator(CancellationToken cancellationToken = new CancellationToken())
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        IAsyncEnumerator<T> IAsyncEnumerable<T>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAsyncEnumerator(cancellationToken);
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.AsEnumerable().GetEnumerator();
        }
    }

    public class FakeDbAsyncEnumerator<T> : IAsyncEnumerator<T>
    {
        private readonly IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        public ValueTask<bool> MoveNextAsync()
        {
            return new ValueTask<bool>(_inner.MoveNext());
        }

        public ValueTask DisposeAsync()
        {
            _inner.Dispose();
            return new ValueTask(Task.CompletedTask);
        }
    }

    public abstract class FakeQueryProvider<T> : IOrderedQueryable<T>, IQueryProvider
    {
        private IEnumerable<T> _enumerable;

        protected FakeQueryProvider(Expression expression)
        {
            Expression = expression;
        }

        protected FakeQueryProvider(IEnumerable<T> enumerable)
        {
            _enumerable = enumerable;
            Expression = enumerable.AsQueryable().Expression;
        }

        public IQueryable CreateQuery(Expression expression)
        {
            if (expression is MethodCallExpression m)
            {
                var resultType = m.Method.ReturnType; // it should be IQueryable<T>
                var tElement = resultType.GetGenericArguments().First();
                return (IQueryable) CreateInstance(tElement, expression);
            }

            return CreateQuery<T>(expression);
        }

        public IQueryable<TEntity> CreateQuery<TEntity>(Expression expression)
        {
            return (IQueryable<TEntity>) CreateInstance(typeof(TEntity), expression);
        }

        private object CreateInstance(Type tElement, Expression expression)
        {
            var queryType = GetType().GetGenericTypeDefinition().MakeGenericType(tElement);
            return Activator.CreateInstance(queryType, expression);
        }

        public object Execute(Expression expression)
        {
            return CompileExpressionItem<object>(expression);
        }

        public TResult Execute<TResult>(Expression expression)
        {
            return CompileExpressionItem<TResult>(expression);
        }

        IEnumerator<T> IEnumerable<T>.GetEnumerator()
        {
            if (_enumerable == null) _enumerable = CompileExpressionItem<IEnumerable<T>>(Expression);
            return _enumerable.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            if (_enumerable == null) _enumerable = CompileExpressionItem<IEnumerable<T>>(Expression);
            return _enumerable.GetEnumerator();
        }

        public Type ElementType => typeof(T);

        public Expression Expression { get; }

        public IQueryProvider Provider => this;

        private static TResult CompileExpressionItem<TResult>(Expression expression)
        {
            var visitor = new FakeExpressionVisitor();
            var body = visitor.Visit(expression);
            var f = Expression.Lambda<Func<TResult>>(body ?? throw new InvalidOperationException(string.Format("{0} is null", nameof(body))), (IEnumerable<ParameterExpression>) null);
            return f.Compile()();
        }
    }

    public class FakeExpressionVisitor : ExpressionVisitor
    {
    }

    public class FakeDatabaseFacade : DatabaseFacade
    {
        public FakeDatabaseFacade(DbContext context) : base(context)
        {
        }

        public override bool EnsureCreated()
        {
            return true;
        }

        public override Task<bool> EnsureCreatedAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.FromResult(EnsureCreated());
        }

        public override bool EnsureDeleted()
        {
            return true;
        }

        public override Task<bool> EnsureDeletedAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.FromResult(EnsureDeleted());
        }

        public override bool CanConnect()
        {
            return true;
        }

        public override Task<bool> CanConnectAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.FromResult(CanConnect());
        }

        public override IDbContextTransaction BeginTransaction()
        {
            return new FakeDbContextTransaction();
        }

        public override Task<IDbContextTransaction> BeginTransactionAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.FromResult(BeginTransaction());
        }

        public override void CommitTransaction()
        {
        }

        public override Task CommitTransactionAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.CompletedTask;
        }

        public override void RollbackTransaction()
        {
        }

        public override Task RollbackTransactionAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.CompletedTask;
        }

        public override IExecutionStrategy CreateExecutionStrategy()
        {
            return null;
        }

        public override string ToString()
        {
            return string.Empty;
        }
    }

    public class FakeDbContextTransaction : IDbContextTransaction
    {
        public Guid TransactionId => Guid.NewGuid();
        public void Commit() { }
        public void Rollback() { }
        public Task CommitAsync(CancellationToken cancellationToken = new CancellationToken()) => Task.CompletedTask;
        public Task RollbackAsync(CancellationToken cancellationToken = new CancellationToken()) => Task.CompletedTask;
        public void Dispose() { }
        public ValueTask DisposeAsync() => default;
    }

    #endregion

    #region POCO classes

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    // Branch
    public class Branch
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name
        public int? OwnerId { get; set; } // OwnerId
        public int? RepoId { get; set; } // RepoId
        public byte? IsDefault { get; set; } // IsDefault
        public int? ParentBranchId { get; set; } // ParentBranchId
        public int? CommitId { get; set; } // CommitId
        public int? GitFileId { get; set; } // GitFileId

        // Reverse navigation

        /// <summary>
        /// Child Branches where [Branch].[ParentBranchId] point to this entity (FK__Branch__ParentBr__52593CB8)
        /// </summary>
        public virtual ICollection<Branch> Branches { get; set; } // Branch.FK__Branch__ParentBr__52593CB8

        /// <summary>
        /// Child PullRequests where [PullRequest].[FromBranchId] point to this entity (FK__PullReque__FromB__59FA5E80)
        /// </summary>
        public virtual ICollection<PullRequest> PullRequests_FromBranchId { get; set; } // PullRequest.FK__PullReque__FromB__59FA5E80

        /// <summary>
        /// Child PullRequests where [PullRequest].[ToBranchId] point to this entity (FK__PullReque__ToBra__5AEE82B9)
        /// </summary>
        public virtual ICollection<PullRequest> PullRequests_ToBranchId { get; set; } // PullRequest.FK__PullReque__ToBra__5AEE82B9

        /// <summary>
        /// Child Repoes where [Repo].[BranchId] point to this entity (FK__Repo__BranchId__60A75C0F)
        /// </summary>
        public virtual ICollection<Repo> Repoes { get; set; } // Repo.FK__Repo__BranchId__60A75C0F

        // Foreign keys

        /// <summary>
        /// Parent Branch pointed by [Branch].([ParentBranchId]) (FK__Branch__ParentBr__52593CB8)
        /// </summary>
        public virtual Branch ParentBranch { get; set; } // FK__Branch__ParentBr__52593CB8

        /// <summary>
        /// Parent Commit pointed by [Branch].([CommitId]) (FK__Branch__CommitId__534D60F1)
        /// </summary>
        public virtual Commit Commit { get; set; } // FK__Branch__CommitId__534D60F1

        /// <summary>
        /// Parent GitFile pointed by [Branch].([GitFileId]) (FK__Branch__GitFileI__5070F446)
        /// </summary>
        public virtual GitFile GitFile { get; set; } // FK__Branch__GitFileI__5070F446

        public Branch()
        {
            Branches = new List<Branch>();
            PullRequests_FromBranchId = new List<PullRequest>();
            PullRequests_ToBranchId = new List<PullRequest>();
            Repoes = new List<Repo>();
        }
    }

    // Commit
    public class Commit
    {
        public int Id { get; set; } // Id (Primary key)
        public int? GitFileId { get; set; } // GitFileId
        public DateTime? CommiteDate { get; set; } // CommiteDate

        // Reverse navigation

        /// <summary>
        /// Child Branches where [Branch].[CommitId] point to this entity (FK__Branch__CommitId__534D60F1)
        /// </summary>
        public virtual ICollection<Branch> Branches { get; set; } // Branch.FK__Branch__CommitId__534D60F1

        // Foreign keys

        /// <summary>
        /// Parent GitFile pointed by [Commit].([GitFileId]) (FK__Commit__GitFileI__5441852A)
        /// </summary>
        public virtual GitFile GitFile { get; set; } // FK__Commit__GitFileI__5441852A

        public Commit()
        {
            Branches = new List<Branch>();
        }
    }

    // GitFile
    public class GitFile
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name
        public string Type { get; set; } // Type (length: 30)

        // Reverse navigation

        /// <summary>
        /// Child Branches where [Branch].[GitFileId] point to this entity (FK__Branch__GitFileI__5070F446)
        /// </summary>
        public virtual ICollection<Branch> Branches { get; set; } // Branch.FK__Branch__GitFileI__5070F446

        /// <summary>
        /// Child Commits where [Commit].[GitFileId] point to this entity (FK__Commit__GitFileI__5441852A)
        /// </summary>
        public virtual ICollection<Commit> Commits { get; set; } // Commit.FK__Commit__GitFileI__5441852A

        public GitFile()
        {
            Branches = new List<Branch>();
            Commits = new List<Commit>();
        }
    }

    // InviteRequest
    public class InviteRequest
    {
        public int Id { get; set; } // Id (Primary key)
        public int? RepoId { get; set; } // RepoId
        public int? ReceiverId { get; set; } // ReceiverId
        public int? OrganizationId { get; set; } // OrganizationId
        public string Status { get; set; } // Status (length: 40)

        // Reverse navigation

        /// <summary>
        /// Child Repoes where [Repo].[InviteRequestId] point to this entity (FK__Repo__InviteRequ__628FA481)
        /// </summary>
        public virtual ICollection<Repo> Repoes { get; set; } // Repo.FK__Repo__InviteRequ__628FA481

        // Foreign keys

        /// <summary>
        /// Parent Organization pointed by [InviteRequest].([OrganizationId]) (FK__InviteReq__Organ__571DF1D5)
        /// </summary>
        public virtual Organization Organization { get; set; } // FK__InviteReq__Organ__571DF1D5

        /// <summary>
        /// Parent Repo pointed by [InviteRequest].([RepoId]) (FK__InviteReq__RepoI__5535A963)
        /// </summary>
        public virtual Repo Repo { get; set; } // FK__InviteReq__RepoI__5535A963

        /// <summary>
        /// Parent User pointed by [InviteRequest].([ReceiverId]) (FK__InviteReq__Recei__5629CD9C)
        /// </summary>
        public virtual User User { get; set; } // FK__InviteReq__Recei__5629CD9C

        public InviteRequest()
        {
            Repoes = new List<Repo>();
        }
    }

    // Organization
    public class Organization
    {
        public int Id { get; set; } // Id (Primary key)
        public string OrgName { get; set; } // OrgName
        public int? OwnerId { get; set; } // OwnerId
        public int? RepositoryId { get; set; } // RepositoryId

        // Reverse navigation

        /// <summary>
        /// Child InviteRequests where [InviteRequest].[OrganizationId] point to this entity (FK__InviteReq__Organ__571DF1D5)
        /// </summary>
        public virtual ICollection<InviteRequest> InviteRequests { get; set; } // InviteRequest.FK__InviteReq__Organ__571DF1D5

        /// <summary>
        /// Child OrgUsers where [OrgUser].[OrganizationId] point to this entity (FK__OrgUser__Organiz__66603565)
        /// </summary>
        public virtual ICollection<OrgUser> OrgUsers { get; set; } // OrgUser.FK__OrgUser__Organiz__66603565

        /// <summary>
        /// Child Teams where [Team].[OrganizationId] point to this entity (FK__Team__Organizati__5165187F)
        /// </summary>
        public virtual ICollection<Team> Teams { get; set; } // Team.FK__Team__Organizati__5165187F

        // Foreign keys

        /// <summary>
        /// Parent Repo pointed by [Organization].([RepositoryId]) (FK__Organizat__Repos__656C112C)
        /// </summary>
        public virtual Repo Repo { get; set; } // FK__Organizat__Repos__656C112C

        public Organization()
        {
            InviteRequests = new List<InviteRequest>();
            OrgUsers = new List<OrgUser>();
            Teams = new List<Team>();
        }
    }

    // OrgUser
    public class OrgUser
    {
        public int Id { get; set; } // Id (Primary key)
        public int? OrganizationId { get; set; } // OrganizationId
        public int? UserId { get; set; } // UserId
        public string Status { get; set; }

        // Foreign keys

        /// <summary>
        /// Parent Organization pointed by [OrgUser].([OrganizationId]) (FK__OrgUser__Organiz__66603565)
        /// </summary>
        public virtual Organization Organization { get; set; } // FK__OrgUser__Organiz__66603565

        /// <summary>
        /// Parent User pointed by [OrgUser].([UserId]) (FK__OrgUser__UserId__6754599E)
        /// </summary>
        public virtual User User { get; set; } // FK__OrgUser__UserId__6754599E
    }

    // PullRequest
    public class PullRequest
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name
        public string Status { get; set; } // Status (length: 20)
        public int? FromBranchId { get; set; } // FromBranchId
        public int? ToBranchId { get; set; } // ToBranchId
        public int? OwnerId { get; set; } // OwnerId
        public int? ReviewerId { get; set; } // ReviewerId

        // Reverse navigation

        /// <summary>
        /// Child Repoes where [Repo].[PullRequestId] point to this entity (FK__Repo__PullReques__619B8048)
        /// </summary>
        public virtual ICollection<Repo> Repoes { get; set; } // Repo.FK__Repo__PullReques__619B8048

        // Foreign keys

        /// <summary>
        /// Parent Branch pointed by [PullRequest].([FromBranchId]) (FK__PullReque__FromB__59FA5E80)
        /// </summary>
        public virtual Branch FromBranch { get; set; } // FK__PullReque__FromB__59FA5E80

        /// <summary>
        /// Parent Branch pointed by [PullRequest].([ToBranchId]) (FK__PullReque__ToBra__5AEE82B9)
        /// </summary>
        public virtual Branch ToBranch { get; set; } // FK__PullReque__ToBra__5AEE82B9

        /// <summary>
        /// Parent User pointed by [PullRequest].([OwnerId]) (FK__PullReque__Owner__59063A47)
        /// </summary>
        public virtual User Owner { get; set; } // FK__PullReque__Owner__59063A47

        /// <summary>
        /// Parent User pointed by [PullRequest].([ReviewerId]) (FK__PullReque__Revie__5812160E)
        /// </summary>
        public virtual User Reviewer { get; set; } // FK__PullReque__Revie__5812160E

        public PullRequest()
        {
            Repoes = new List<Repo>();
        }
    }

    // Repo
    public class Repo
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name
        public string License { get; set; } // License (length: 80)
        public int? OwnerId { get; set; } // OwnerId
        public byte? Status { get; set; } // Status
        public int? BranchId { get; set; } // BranchId
        public int? PullRequestId { get; set; } // PullRequestId
        public int? InviteRequestId { get; set; } // InviteRequestId

        // Reverse navigation

        /// <summary>
        /// Child InviteRequests where [InviteRequest].[RepoId] point to this entity (FK__InviteReq__RepoI__5535A963)
        /// </summary>
        public virtual ICollection<InviteRequest> InviteRequests { get; set; } // InviteRequest.FK__InviteReq__RepoI__5535A963

        /// <summary>
        /// Child Organizations where [Organization].[RepositoryId] point to this entity (FK__Organizat__Repos__656C112C)
        /// </summary>
        public virtual ICollection<Organization> Organizations { get; set; } // Organization.FK__Organizat__Repos__656C112C

        /// <summary>
        /// Child RepoTeams where [RepoTeam].[RepositoryId] point to this entity (FK__RepoTeam__Reposi__5DCAEF64)
        /// </summary>
        public virtual ICollection<RepoTeam> RepoTeams { get; set; } // RepoTeam.FK__RepoTeam__Reposi__5DCAEF64

        /// <summary>
        /// Child RepoUsers where [RepoUser].[RepoId] point to this entity (FK__RepoUser__RepoId__5BE2A6F2)
        /// </summary>
        public virtual ICollection<RepoUser> RepoUsers { get; set; } // RepoUser.FK__RepoUser__RepoId__5BE2A6F2

        // Foreign keys

        /// <summary>
        /// Parent Branch pointed by [Repo].([BranchId]) (FK__Repo__BranchId__60A75C0F)
        /// </summary>
        public virtual Branch Branch { get; set; } // FK__Repo__BranchId__60A75C0F

        /// <summary>
        /// Parent InviteRequest pointed by [Repo].([InviteRequestId]) (FK__Repo__InviteRequ__628FA481)
        /// </summary>
        public virtual InviteRequest InviteRequest { get; set; } // FK__Repo__InviteRequ__628FA481

        /// <summary>
        /// Parent PullRequest pointed by [Repo].([PullRequestId]) (FK__Repo__PullReques__619B8048)
        /// </summary>
        public virtual PullRequest PullRequest { get; set; } // FK__Repo__PullReques__619B8048

        /// <summary>
        /// Parent User pointed by [Repo].([OwnerId]) (FK__Repo__OwnerId__5FB337D6)
        /// </summary>
        public virtual User User { get; set; } // FK__Repo__OwnerId__5FB337D6

        public Repo()
        {
            InviteRequests = new List<InviteRequest>();
            Organizations = new List<Organization>();
            RepoTeams = new List<RepoTeam>();
            RepoUsers = new List<RepoUser>();
        }
    }

    // RepoTeam
    public class RepoTeam
    {
        public int Id { get; set; } // Id (Primary key)
        public int? RepositoryId { get; set; } // RepositoryId
        public int? TeamId { get; set; } // TeamId

        // Foreign keys

        /// <summary>
        /// Parent Repo pointed by [RepoTeam].([RepositoryId]) (FK__RepoTeam__Reposi__5DCAEF64)
        /// </summary>
        public virtual Repo Repo { get; set; } // FK__RepoTeam__Reposi__5DCAEF64

        /// <summary>
        /// Parent Team pointed by [RepoTeam].([TeamId]) (FK__RepoTeam__TeamId__5EBF139D)
        /// </summary>
        public virtual Team Team { get; set; } // FK__RepoTeam__TeamId__5EBF139D
    }

    // RepoUser
    public class RepoUser
    {
        public int Id { get; set; } // Id (Primary key)
        public int? RepoId { get; set; } // RepoId
        public int? UserId { get; set; } // UserId
        public string? Status { get; set; }

        // Foreign keys

        /// <summary>
        /// Parent Repo pointed by [RepoUser].([RepoId]) (FK__RepoUser__RepoId__5BE2A6F2)
        /// </summary>
        public virtual Repo Repo { get; set; } // FK__RepoUser__RepoId__5BE2A6F2

        /// <summary>
        /// Parent User pointed by [RepoUser].([UserId]) (FK__RepoUser__UserId__5CD6CB2B)
        /// </summary>
        public virtual User User { get; set; } // FK__RepoUser__UserId__5CD6CB2B
    }

    // Team
    public class Team
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name
        public int? ParentTeamId { get; set; } // ParentTeamId
        public bool? IsParentTeam { get; set; } // IsParentTeam
        public bool? IsPublic { get; set; } // IsPublic
        public int? OrganizationId { get; set; } // OrganizationId

        // Reverse navigation

        /// <summary>
        /// Child RepoTeams where [RepoTeam].[TeamId] point to this entity (FK__RepoTeam__TeamId__5EBF139D)
        /// </summary>
        public virtual ICollection<RepoTeam> RepoTeams { get; set; } // RepoTeam.FK__RepoTeam__TeamId__5EBF139D

        /// <summary>
        /// Child Teams where [Team].[ParentTeamId] point to this entity (FK__Team__ParentTeam__6A30C649)
        /// </summary>
        public virtual ICollection<Team> Teams { get; set; } // Team.FK__Team__ParentTeam__6A30C649

        /// <summary>
        /// Child TeamMembers where [TeamMember].[TeamId] point to this entity (FK__TeamMembe__TeamI__68487DD7)
        /// </summary>
        public virtual ICollection<TeamMember> TeamMembers { get; set; } // TeamMember.FK__TeamMembe__TeamI__68487DD7

        /// <summary>
        /// Child TeamUsers where [TeamUser].[TeamId] point to this entity (FK__TeamUser__TeamId__6383C8BA)
        /// </summary>
        public virtual ICollection<TeamUser> TeamUsers { get; set; } // TeamUser.FK__TeamUser__TeamId__6383C8BA

        // Foreign keys

        /// <summary>
        /// Parent Organization pointed by [Team].([OrganizationId]) (FK__Team__Organizati__5165187F)
        /// </summary>
        public virtual Organization Organization { get; set; } // FK__Team__Organizati__5165187F

        /// <summary>
        /// Parent Team pointed by [Team].([ParentTeamId]) (FK__Team__ParentTeam__6A30C649)
        /// </summary>
        public virtual Team ParentTeam { get; set; } // FK__Team__ParentTeam__6A30C649

        public Team()
        {
            RepoTeams = new List<RepoTeam>();
            Teams = new List<Team>();
            TeamMembers = new List<TeamMember>();
            TeamUsers = new List<TeamUser>();
        }
    }

    // TeamMember
    public class TeamMember
    {
        public int Id { get; set; } // Id (Primary key)
        public int? TeamId { get; set; } // TeamId
        public int? UserId { get; set; } // UserId

        // Foreign keys

        /// <summary>
        /// Parent Team pointed by [TeamMember].([TeamId]) (FK__TeamMembe__TeamI__68487DD7)
        /// </summary>
        public virtual Team Team { get; set; } // FK__TeamMembe__TeamI__68487DD7

        /// <summary>
        /// Parent User pointed by [TeamMember].([UserId]) (FK__TeamMembe__UserI__693CA210)
        /// </summary>
        public virtual User User { get; set; } // FK__TeamMembe__UserI__693CA210
    }

    // TeamUser
    public class TeamUser
    {
        public int Id { get; set; } // Id (Primary key)
        public int? TeamId { get; set; } // TeamId
        public int? UserId { get; set; } // UserId
        public string? Role { get; set; } //Role

        // Foreign keys

        /// <summary>
        /// Parent Team pointed by [TeamUser].([TeamId]) (FK__TeamUser__TeamId__6383C8BA)
        /// </summary>
        public virtual Team Team { get; set; } // FK__TeamUser__TeamId__6383C8BA

        /// <summary>
        /// Parent User pointed by [TeamUser].([UserId]) (FK__TeamUser__UserId__6477ECF3)
        /// </summary>
        public virtual User User { get; set; } // FK__TeamUser__UserId__6477ECF3
    }

    // User
    public class User
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name
        public string Email { get; set; } // Email (length: 50)
        public string Password { get; set; } // Password (length: 40)
        public string UserName { get; set; } // UserName (length: 40)

        // Reverse navigation

        /// <summary>
        /// Child InviteRequests where [InviteRequest].[ReceiverId] point to this entity (FK__InviteReq__Recei__5629CD9C)
        /// </summary>
        public virtual ICollection<InviteRequest> InviteRequests { get; set; } // InviteRequest.FK__InviteReq__Recei__5629CD9C

        /// <summary>
        /// Child OrgUsers where [OrgUser].[UserId] point to this entity (FK__OrgUser__UserId__6754599E)
        /// </summary>
        public virtual ICollection<OrgUser> OrgUsers { get; set; } // OrgUser.FK__OrgUser__UserId__6754599E

        /// <summary>
        /// Child PullRequests where [PullRequest].[OwnerId] point to this entity (FK__PullReque__Owner__59063A47)
        /// </summary>
        public virtual ICollection<PullRequest> PullRequests_OwnerId { get; set; } // PullRequest.FK__PullReque__Owner__59063A47

        /// <summary>
        /// Child PullRequests where [PullRequest].[ReviewerId] point to this entity (FK__PullReque__Revie__5812160E)
        /// </summary>
        public virtual ICollection<PullRequest> PullRequests_ReviewerId { get; set; } // PullRequest.FK__PullReque__Revie__5812160E

        /// <summary>
        /// Child Repoes where [Repo].[OwnerId] point to this entity (FK__Repo__OwnerId__5FB337D6)
        /// </summary>
        public virtual ICollection<Repo> Repoes { get; set; } // Repo.FK__Repo__OwnerId__5FB337D6

        /// <summary>
        /// Child RepoUsers where [RepoUser].[UserId] point to this entity (FK__RepoUser__UserId__5CD6CB2B)
        /// </summary>
        public virtual ICollection<RepoUser> RepoUsers { get; set; } // RepoUser.FK__RepoUser__UserId__5CD6CB2B

        /// <summary>
        /// Child TeamMembers where [TeamMember].[UserId] point to this entity (FK__TeamMembe__UserI__693CA210)
        /// </summary>
        public virtual ICollection<TeamMember> TeamMembers { get; set; } // TeamMember.FK__TeamMembe__UserI__693CA210

        /// <summary>
        /// Child TeamUsers where [TeamUser].[UserId] point to this entity (FK__TeamUser__UserId__6477ECF3)
        /// </summary>
        public virtual ICollection<TeamUser> TeamUsers { get; set; } // TeamUser.FK__TeamUser__UserId__6477ECF3

        public User()
        {
            InviteRequests = new List<InviteRequest>();
            OrgUsers = new List<OrgUser>();
            PullRequests_OwnerId = new List<PullRequest>();
            PullRequests_ReviewerId = new List<PullRequest>();
            Repoes = new List<Repo>();
            RepoUsers = new List<RepoUser>();
            TeamMembers = new List<TeamMember>();
            TeamUsers = new List<TeamUser>();
        }
    }


    #endregion

    #region POCO Configuration

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    // Branch
    public class BranchConfiguration : IEntityTypeConfiguration<Branch>
    {
        public void Configure(EntityTypeBuilder<Branch> builder)
        {
            builder.ToTable("Branch", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__Branch__3214EC07CACDEE0E").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar(max)").IsRequired(false).IsUnicode(false);
            builder.Property(x => x.OwnerId).HasColumnName(@"OwnerId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.RepoId).HasColumnName(@"RepoId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.IsDefault).HasColumnName(@"IsDefault").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.ParentBranchId).HasColumnName(@"ParentBranchId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CommitId).HasColumnName(@"CommitId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.GitFileId).HasColumnName(@"GitFileId").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Commit).WithMany(b => b.Branches).HasForeignKey(c => c.CommitId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Branch__CommitId__534D60F1");
            builder.HasOne(a => a.GitFile).WithMany(b => b.Branches).HasForeignKey(c => c.GitFileId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Branch__GitFileI__5070F446");
            builder.HasOne(a => a.ParentBranch).WithMany(b => b.Branches).HasForeignKey(c => c.ParentBranchId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Branch__ParentBr__52593CB8");
        }
    }

    // Commit
    public class CommitConfiguration : IEntityTypeConfiguration<Commit>
    {
        public void Configure(EntityTypeBuilder<Commit> builder)
        {
            builder.ToTable("Commit", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__Commit__3214EC07802DC5B2").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.GitFileId).HasColumnName(@"GitFileId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CommiteDate).HasColumnName(@"CommiteDate").HasColumnType("datetime").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.GitFile).WithMany(b => b.Commits).HasForeignKey(c => c.GitFileId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Commit__GitFileI__5441852A");
        }
    }

    // GitFile
    public class GitFileConfiguration : IEntityTypeConfiguration<GitFile>
    {
        public void Configure(EntityTypeBuilder<GitFile> builder)
        {
            builder.ToTable("GitFile", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__GitFile__3214EC0765B1EDAF").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar(max)").IsRequired(false).IsUnicode(false);
            builder.Property(x => x.Type).HasColumnName(@"Type").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
        }
    }

    // InviteRequest
    public class InviteRequestConfiguration : IEntityTypeConfiguration<InviteRequest>
    {
        public void Configure(EntityTypeBuilder<InviteRequest> builder)
        {
            builder.ToTable("InviteRequest", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__InviteRe__3214EC079B3EF8D8").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.RepoId).HasColumnName(@"RepoId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ReceiverId).HasColumnName(@"ReceiverId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.OrganizationId).HasColumnName(@"OrganizationId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("varchar(40)").IsRequired(false).IsUnicode(false).HasMaxLength(40);

            // Foreign keys
            builder.HasOne(a => a.Organization).WithMany(b => b.InviteRequests).HasForeignKey(c => c.OrganizationId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__InviteReq__Organ__571DF1D5");
            builder.HasOne(a => a.Repo).WithMany(b => b.InviteRequests).HasForeignKey(c => c.RepoId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__InviteReq__RepoI__5535A963");
            builder.HasOne(a => a.User).WithMany(b => b.InviteRequests).HasForeignKey(c => c.ReceiverId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__InviteReq__Recei__5629CD9C");
        }
    }

    // Organization
    public class OrganizationConfiguration : IEntityTypeConfiguration<Organization>
    {
        public void Configure(EntityTypeBuilder<Organization> builder)
        {
            builder.ToTable("Organization", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__Organiza__3214EC0790347150").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.OrgName).HasColumnName(@"OrgName").HasColumnType("varchar(max)").IsRequired(false).IsUnicode(false);
            builder.Property(x => x.OwnerId).HasColumnName(@"OwnerId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.RepositoryId).HasColumnName(@"RepositoryId").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Repo).WithMany(b => b.Organizations).HasForeignKey(c => c.RepositoryId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Organizat__Repos__656C112C");
        }
    }

    // OrgUser
    public class OrgUserConfiguration : IEntityTypeConfiguration<OrgUser>
    {
        public void Configure(EntityTypeBuilder<OrgUser> builder)
        {
            builder.ToTable("OrgUser", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__OrgUser__3214EC07B6D3D098").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.OrganizationId).HasColumnName(@"OrganizationId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Organization).WithMany(b => b.OrgUsers).HasForeignKey(c => c.OrganizationId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__OrgUser__Organiz__66603565");
            builder.HasOne(a => a.User).WithMany(b => b.OrgUsers).HasForeignKey(c => c.UserId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__OrgUser__UserId__6754599E");
        }
    }

    // PullRequest
    public class PullRequestConfiguration : IEntityTypeConfiguration<PullRequest>
    {
        public void Configure(EntityTypeBuilder<PullRequest> builder)
        {
            builder.ToTable("PullRequest", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__PullRequ__3214EC07FD4C1DF5").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar(max)").IsRequired(false).IsUnicode(false);
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.FromBranchId).HasColumnName(@"FromBranchId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ToBranchId).HasColumnName(@"ToBranchId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.OwnerId).HasColumnName(@"OwnerId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ReviewerId).HasColumnName(@"ReviewerId").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.FromBranch).WithMany(b => b.PullRequests_FromBranchId).HasForeignKey(c => c.FromBranchId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__PullReque__FromB__59FA5E80");
            builder.HasOne(a => a.Owner).WithMany(b => b.PullRequests_OwnerId).HasForeignKey(c => c.OwnerId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__PullReque__Owner__59063A47");
            builder.HasOne(a => a.Reviewer).WithMany(b => b.PullRequests_ReviewerId).HasForeignKey(c => c.ReviewerId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__PullReque__Revie__5812160E");
            builder.HasOne(a => a.ToBranch).WithMany(b => b.PullRequests_ToBranchId).HasForeignKey(c => c.ToBranchId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__PullReque__ToBra__5AEE82B9");
        }
    }

    // Repo
    public class RepoConfiguration : IEntityTypeConfiguration<Repo>
    {
        public void Configure(EntityTypeBuilder<Repo> builder)
        {
            builder.ToTable("Repo", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__Repo__3214EC07F52BAA28").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar(max)").IsRequired(false).IsUnicode(false);
            builder.Property(x => x.License).HasColumnName(@"License").HasColumnType("varchar(80)").IsRequired(false).IsUnicode(false).HasMaxLength(80);
            builder.Property(x => x.OwnerId).HasColumnName(@"OwnerId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.BranchId).HasColumnName(@"BranchId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PullRequestId).HasColumnName(@"PullRequestId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.InviteRequestId).HasColumnName(@"InviteRequestId").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Branch).WithMany(b => b.Repoes).HasForeignKey(c => c.BranchId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Repo__BranchId__60A75C0F");
            builder.HasOne(a => a.InviteRequest).WithMany(b => b.Repoes).HasForeignKey(c => c.InviteRequestId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Repo__InviteRequ__628FA481");
            builder.HasOne(a => a.PullRequest).WithMany(b => b.Repoes).HasForeignKey(c => c.PullRequestId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Repo__PullReques__619B8048");
            builder.HasOne(a => a.User).WithMany(b => b.Repoes).HasForeignKey(c => c.OwnerId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Repo__OwnerId__5FB337D6");
        }
    }

    // RepoTeam
    public class RepoTeamConfiguration : IEntityTypeConfiguration<RepoTeam>
    {
        public void Configure(EntityTypeBuilder<RepoTeam> builder)
        {
            builder.ToTable("RepoTeam", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__RepoTeam__3214EC07FE5F020D").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.RepositoryId).HasColumnName(@"RepositoryId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TeamId).HasColumnName(@"TeamId").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Repo).WithMany(b => b.RepoTeams).HasForeignKey(c => c.RepositoryId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__RepoTeam__Reposi__5DCAEF64");
            builder.HasOne(a => a.Team).WithMany(b => b.RepoTeams).HasForeignKey(c => c.TeamId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__RepoTeam__TeamId__5EBF139D");
        }
    }

    // RepoUser
    public class RepoUserConfiguration : IEntityTypeConfiguration<RepoUser>
    {
        public void Configure(EntityTypeBuilder<RepoUser> builder)
        {
            builder.ToTable("RepoUser", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__RepoUser__3214EC07AD00593D").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.RepoId).HasColumnName(@"RepoId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Repo).WithMany(b => b.RepoUsers).HasForeignKey(c => c.RepoId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__RepoUser__RepoId__5BE2A6F2");
            builder.HasOne(a => a.User).WithMany(b => b.RepoUsers).HasForeignKey(c => c.UserId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__RepoUser__UserId__5CD6CB2B");
        }
    }

    // Team
    public class TeamConfiguration : IEntityTypeConfiguration<Team>
    {
        public void Configure(EntityTypeBuilder<Team> builder)
        {
            builder.ToTable("Team", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__Team__3214EC0718FA5AC5").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar(max)").IsRequired(false).IsUnicode(false);
            builder.Property(x => x.ParentTeamId).HasColumnName(@"ParentTeamId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.IsParentTeam).HasColumnName(@"IsParentTeam").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.IsPublic).HasColumnName(@"IsPublic").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.OrganizationId).HasColumnName(@"OrganizationId").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Organization).WithMany(b => b.Teams).HasForeignKey(c => c.OrganizationId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Team__Organizati__5165187F");
            builder.HasOne(a => a.ParentTeam).WithMany(b => b.Teams).HasForeignKey(c => c.ParentTeamId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Team__ParentTeam__6A30C649");
        }
    }

    // TeamMember
    public class TeamMemberConfiguration : IEntityTypeConfiguration<TeamMember>
    {
        public void Configure(EntityTypeBuilder<TeamMember> builder)
        {
            builder.ToTable("TeamMember", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__TeamMemb__3214EC07704F7629").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.TeamId).HasColumnName(@"TeamId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Team).WithMany(b => b.TeamMembers).HasForeignKey(c => c.TeamId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__TeamMembe__TeamI__68487DD7");
            builder.HasOne(a => a.User).WithMany(b => b.TeamMembers).HasForeignKey(c => c.UserId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__TeamMembe__UserI__693CA210");
        }
    }

    // TeamUser
    public class TeamUserConfiguration : IEntityTypeConfiguration<TeamUser>
    {
        public void Configure(EntityTypeBuilder<TeamUser> builder)
        {
            builder.ToTable("TeamUser", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__TeamUser__3214EC07188C16C2").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.TeamId).HasColumnName(@"TeamId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Team).WithMany(b => b.TeamUsers).HasForeignKey(c => c.TeamId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__TeamUser__TeamId__6383C8BA");
            builder.HasOne(a => a.User).WithMany(b => b.TeamUsers).HasForeignKey(c => c.UserId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__TeamUser__UserId__6477ECF3");
        }
    }

    // User
    public class UserConfiguration : IEntityTypeConfiguration<User>
    {
        public void Configure(EntityTypeBuilder<User> builder)
        {
            builder.ToTable("User", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__User__3214EC07AB499454").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar(max)").IsRequired(false).IsUnicode(false);
            builder.Property(x => x.Email).HasColumnName(@"Email").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.Password).HasColumnName(@"Password").HasColumnType("varchar(40)").IsRequired(false).IsUnicode(false).HasMaxLength(40);
            builder.Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("varchar(40)").IsRequired(false).IsUnicode(false).HasMaxLength(40);
        }
    }


    #endregion

}
// </auto-generated>
